#!/usr/bin/env python
# -*- coding: utf-8 -*-


"""
https://leetcode.com/problems/minimize-malware-spread/

In a network of nodes,
each node i is directly connected to another node
j if and only if graph[i][j] = 1.

Some nodes initial are initially infected by malware.
Whenever two nodes are directly connected and at least one of those
two nodes is infected by malware, both nodes will be infected by malware.
This spread of malware will continue until no more nodes
can be infected in this manner.

Suppose M(initial) is the final number of nodes infected with malware in
the entire network, after the spread of malware stops.

----------
M(initial) => 所有被infected nodes!
問: 從initial中移除那一個node會使M(initial)值最小???
----------


We will remove one node from the initial list.
Return the node that if removed, would minimize M(initial).
If multiple nodes could be removed to minimize M(initial),
***return such a node with the smallest index. 需求看清楚!

Note that if a node was removed from the initial list of infected nodes,
it may still be infected later as a result of the malware spread.


Example 1:
Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
Output: 0

Example 2:
Input: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]
Output: 0

Example 3:
Input: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]
Output: 1

Note:
* 1 < graph.length = graph[0].length <= 300
* 0 <= graph[i][j] == graph[j][i] <= 1
* graph[i][i] = 1
* 1 <= initial.length < graph.length
* 0 <= initial[i] < graph.length

graph 的format explain:
1. graph的index為node index
2. graph[0] = [1,1,0] 代表 0->0 == 1, 0->1 == 1, 0->2 == 0
"""


class Solution(object):
    def minMalwareSpread(self, graph, initial):
        def dfs(infectant, graph, infectants, initial, visited):
            if infectant in visited:
                return 0
            counter = 0
            visited.add(infectant)
            for adj, connect in enumerate(graph[infectant]):
                if connect == 1:
                    if adj in visited:
                        continue
                    if adj in infectants:
                        for i, v in enumerate(initial):
                            if v == adj:
                                initial[i] = -1
                        return -1
                    subCounter = dfs(adj, graph, infectants, initial, visited)
                    if subCounter == -1:
                        return -1
                    counter += subCounter
            return counter + 1


        maxInfected = 0
        initial.sort()
        delNode = initial[0]
        infectants = set(initial)
        for i, infectant in enumerate(initial):
            if infectant == -1:
                continue
            visited = set()
            infectedNum = dfs(infectant, graph, infectants, initial, visited)
            print(infectant, infectedNum)
            if infectedNum > maxInfected:
                delNode = infectant
                maxInfected = infectedNum
        print(maxInfected)
        return delNode

def build():
    return [[1,0,0,0],[0,1,0,0],[0,0,1,1],[0,0,1,1]], [3,1]
    return [[1,1,0],[1,1,0],[0,0,1]], [0,1]
    #  [0, 4, 7, 8, 11, 28, 29]
    #  bad: 13 parent: 4 children: [15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 0, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13]
#  bad: 4 parent: 4 children: [15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 0, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13]
#  bad: 1 parent: 19 children: [1, 25, 23]
#  bad: 3 parent: 4 children: [15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 0, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13]
    return [
    [1,0,0,0,1,0,1,0,1,1,1,0,1,1,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0],
    [0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,0],
    [0,0,1,0,0,0,0,1,1,0,1,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0],
    [0,0,0,1,0,0,1,1,0,1,0,0,0,0,1,1,0,1,1,0,0,0,1,0,0,1,0,0,1,1],
    [1,0,0,0,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
    [0,0,0,0,0,1,0,0,1,1,0,1,0,0,0,0,1,0,0,1,0,1,0,1,0,1,0,0,0,1],
    [1,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0],
    [0,0,1,1,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1],
    [1,0,1,0,1,1,0,0,1,0,0,0,1,1,0,1,0,0,1,1,0,0,0,0,0,1,0,0,0,0],
    [1,0,0,1,0,1,1,0,0,1,0,0,0,1,0,1,0,0,0,0,1,0,1,0,0,1,0,0,0,0],
    [1,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0],
    [0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,1,1,1,0,0,0,0,1,0,0,0,1,0,0,1],
    [1,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,1,0],
    [1,0,1,0,0,0,0,0,1,1,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,0,1,0,1,0],
    [0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,1,0,0,0,0,1,1,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0],
    [1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,1,0,1,0,0,0,1,0,1,0,0,0],
    [0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,1,1,1,0,0,0,0,0,1,0,0,1,0],
    [1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,1,0,0,0,1,0,1],
    [0,1,0,0,0,1,1,0,1,0,1,0,1,1,1,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0],
    [1,0,1,0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,1,1,1,0,1,0,0,0,0,0],
    [0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,1,0,0,1,0,0,1,0],
    [0,0,0,1,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1],
    [0,1,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,1,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0],
    [0,1,0,1,0,1,1,0,1,1,0,0,1,0,0,0,0,1,0,0,0,1,0,1,0,1,0,1,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,1,0,1,0,0],
    [0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,1,1,0,0,0,0,0,1,1],
    [0,0,0,1,1,1,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,1]], [13,4,1,3]

    return [[1,1,1],[1,1,1],[1,1,1]], [1,2]


if __name__ == "__main__":
    s = Solution()
    print(s.minMalwareSpread(*build()))
    print(s.rewrite2(*build()))
