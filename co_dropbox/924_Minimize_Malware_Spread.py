#!/usr/bin/env python
# -*- coding: utf-8 -*-


"""
https://leetcode.com/problems/minimize-malware-spread/

In a network of nodes,
each node i is directly connected to another node
j if and only if graph[i][j] = 1.

Some nodes initial are initially infected by malware.
Whenever two nodes are directly connected and at least one of those
two nodes is infected by malware, both nodes will be infected by malware.
This spread of malware will continue until no more nodes
can be infected in this manner.

Suppose M(initial) is the final number of nodes infected with malware in
the entire network, after the spread of malware stops.

----------
M(initial) => 所有被infected nodes!
問: 從initial中移除那一個node會使M(initial)值最小???
----------


We will remove one node from the initial list.
Return the node that if removed, would minimize M(initial).
If multiple nodes could be removed to minimize M(initial),
***return such a node with the smallest index. 需求看清楚!

Note that if a node was removed from the initial list of infected nodes,
it may still be infected later as a result of the malware spread.


Example 1:
Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
Output: 0

Example 2:
Input: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]
Output: 0

Example 3:
Input: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]
Output: 1

Note:
* 1 < graph.length = graph[0].length <= 300
* 0 <= graph[i][j] == graph[j][i] <= 1
* graph[i][i] = 1
* 1 <= initial.length < graph.length
* 0 <= initial[i] < graph.length

graph 的format explain:
1. graph的index為node index
2. graph[0] = [1,1,0] 代表 0->0 == 1, 0->1 == 1, 0->2 == 0
"""


class Solution(object):
    def minMalwareSpread(self, graph, initial):
        """
        :type graph: List[List[int]]
        :type initial: List[int]
        :rtype: int
        """
        import collections

        def find(x):
            if x != parents[x]:
                parents[x] = find(parents[x])
            return parents[x]

        def union(x, y):
            parents[find(x)] = find(y)

        # init
        n = len(graph)
        parents = range(n)

        # union
        for i in range(n):
            for j in range(i + 1, n):
                if graph[i][j] == 1:
                    union(i, j)

        #  print("parents: {}".format(parents))

        area = collections.Counter(find(i) for i in range(n))
        print("allNodes: {}".format(area))

        malware = collections.Counter(find(i) for i in initial)
        #  print("badnodes: {}".format(malware))
        return min(initial, key=lambda i: [
            (malware[find(i)] == 1) * -area[find(i)], i])

    def rewrite(self, graph, initial):
        """
        :type graph: List[List[int]]
        :type initial: List[int]
        :rtype: int

        no rank compress
        """
        from collections import Counter as cc

        nodes = len(graph)
        parents = range(nodes) # [0, 1, 2, 3, ... ] SMART!

        def find(node):
            if parents[node] != node:
                return find(parents[node])
            return node

        def union(x, y):
            fx = find(x)
            fy = find(y)
            parents[fx] = fy

        # build union parents
        for x in range(nodes):
            for y in range(x + 1, nodes):
                # 注意此! 為1才是有conncetion!
                if graph[x][y] == 1:
                    union(x, y)

        #  print("parents: {}".format(parents))

        # dissect nodes forms a quorum
        # allNodes means: for each node if they form a quorum, will eventually
        # has the same return node, thus the node count would be the nodes
        # inside a quorum.
        allNodes = cc(find(i) for i in range(nodes))
        #  print("allNodes: {}".format(allNodes))

        # initial means the nodes being effected.
        # with this effected nodes, see are they in the same quorum.
        # If they are, then will have single node with multiple counts.
        # If not, if having 2 effected nodes, will have 2 counter key, each
        # has value 1.
        #  badNodes = cc(find(i) for i in initial)
        #  print("badNodes: {}".format(badNodes))

        result = []
        # 重點! 以unin的!root! 為 key! 以此key來算count!

        for bad in initial:
            key = find(bad)
            result.append((allNodes[key], -bad))

        #  print(result)

        return -max(result)[1]

    def rewrite2(self, graph, initial):
        """
        :type graph: List[List[int]]
        :type initial: List[int]
        :rtype: int
        union rank compress
        """
        from collections import defaultdict as dd

        class Node(object):
            def __init__(self, val):
                self.rank = 0
                self.val = val
                self.parent = self
                self.children = set()

            def addChild(self, node):
                self.children.add(node)

            def getc(self):
                return self.children

            def getp(self):
                return self.parent

            def setp(self, pnode):
                self.parent = pnode
                pnode.addChild(self)

            def incrRank(self):
                self.rank += 1


        nodeCnt = len(graph)
        tmpNodes = range(nodeCnt)
        nodes = [Node(n) for n in range(nodeCnt)]

        def find(node):
            if node.parent != node:
                node.parent = find(node.parent)
            return node.getp()

        def union(x, y):
            fx = find(x)
            fy = find(y)
            if fx.val == fy.val:
                return

            if fx.rank > fy.rank:
                fy.setp(fx)
            elif fx.rank < fy.rank:
                fx.setp(fy)
            else:
                fy.incrRank()
                fx.setp(fy)

        # build union parents
        for x in range(nodeCnt):
            for y in tmpNodes[:x] + tmpNodes[x+1:]:
                # 注意此! 為1才是有conncetion!
                if graph[x][y] == 1:
                    union(nodes[x], nodes[y])

        # key: nodes, val: which initial
        dmap = dd(list)
        mkey = float("-inf")

        for bad in initial:
            b = nodes[bad]
            m = len(b.getp().getc())
            mkey = max(mkey, m)
            dmap[m].append(bad)

        return [] if mkey == float("-inf") else sorted(dmap[mkey])[0]

    def rewrite3(self, graph, initial):
        """
        :type graph: List[List[int]]
        :type initial: List[int]
        :rtype: int
        union rank compress + build graph from initial
        """
        from collections import defaultdict as dd

        class Node(object):
            def __init__(self, val):
                self.rank = 0
                self.val = val
                self.parent = self
                self.children = set()

            def addChild(self, node):
                self.children.add(node)

            def getc(self):
                return self.children

            def getp(self):
                return self.parent

            def setp(self, pnode):
                self.parent = pnode
                pnode.addChild(self)

            def incrRank(self):
                self.rank += 1

        nodes = [Node(n) for n in range(len(graph))]

        def find(node):
            if node.parent != node:
                node.parent = find(node.parent)
            return node.getp()

        def union(x, y):
            fx = find(x)
            fy = find(y)
            if fx.val == fy.val:
                return

            if fx.rank > fy.rank:
                fy.setp(fx)
            elif fx.rank < fy.rank:
                fx.setp(fy)
            else:
                fy.incrRank()
                fx.setp(fy)

        oinitial = initial
        visited = set()

        while initial:
            tmp = []

            for x in initial:
                visited.add(x)

                for y in range(len(graph[x])):
                    if y != x and graph[x][y] == 1 and y not in visited:
                        tmp.append(y)
                        union(nodes[x], nodes[y])
            initial = tmp

        maxx = float("-inf")
        dmap = dd(list)

        for i in oinitial:
            n = nodes[i]
            parent = n.getp()
            children = parent.getc()
            maxx = max(maxx, len(children))
            dmap[len(children)].append(i)

        return [] if maxx == 0 or maxx == float("-inf") else \
            sorted(dmap[maxx])[0]

def build():
    #  [0, 4, 7, 8, 11, 28, 29]
    #  bad: 13 parent: 4 children: [15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 0, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13]
#  bad: 4 parent: 4 children: [15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 0, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13]
#  bad: 1 parent: 19 children: [1, 25, 23]
#  bad: 3 parent: 4 children: [15, 16, 17, 18, 19, 20, 21, 22, 24, 26, 27, 28, 29, 0, 3, 5, 6, 7, 8, 9, 10, 11, 12, 13]
    return [
    [1,0,0,0,1,0,1,0,1,1,1,0,1,1,0,0,1,0,1,0,1,0,0,0,0,0,0,0,0,0],
    [0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,1,0,0,0,0],
    [0,0,1,0,0,0,0,1,1,0,1,0,0,1,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0],
    [0,0,0,1,0,0,1,1,0,1,0,0,0,0,1,1,0,1,1,0,0,0,1,0,0,1,0,0,1,1],
    [1,0,0,0,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],
    [0,0,0,0,0,1,0,0,1,1,0,1,0,0,0,0,1,0,0,1,0,1,0,1,0,1,0,0,0,1],
    [1,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0],
    [0,0,1,1,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1],
    [1,0,1,0,1,1,0,0,1,0,0,0,1,1,0,1,0,0,1,1,0,0,0,0,0,1,0,0,0,0],
    [1,0,0,1,0,1,1,0,0,1,0,0,0,1,0,1,0,0,0,0,1,0,1,0,0,1,0,0,0,0],
    [1,0,1,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0],
    [0,0,0,0,1,1,0,0,0,0,0,1,0,0,0,1,1,1,0,0,0,0,1,0,0,0,1,0,0,1],
    [1,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,1,0,0,1,0],
    [1,0,1,0,0,0,0,0,1,1,0,0,0,1,0,0,0,1,0,1,0,0,0,0,0,0,1,0,1,0],
    [0,0,1,1,0,0,0,0,0,0,1,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0],
    [0,0,0,1,0,0,0,0,1,1,0,1,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0],
    [1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,1,0,1,0,1,0,0,0,1,0,1,0,0,0],
    [0,0,0,1,0,0,0,0,0,0,0,1,0,1,1,0,0,1,1,1,0,0,0,0,0,1,0,0,1,0],
    [1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,1,0,0,0,1,0,1],
    [0,1,0,0,0,1,1,0,1,0,1,0,1,1,1,0,0,1,0,1,0,1,1,0,0,0,0,0,0,0],
    [1,0,1,0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,1,1,1,0,1,0,0,0,0,0],
    [0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,1,0,0,1,0,0,1,0],
    [0,0,0,1,0,0,0,1,0,1,0,1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1],
    [0,1,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,1,0,1,0,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0],
    [0,1,0,1,0,1,1,0,1,1,0,0,1,0,0,0,0,1,0,0,0,1,0,1,0,1,0,1,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0],
    [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,1,0,1,0,0],
    [0,0,0,1,1,0,0,0,0,0,0,0,1,1,0,0,0,1,0,0,0,1,1,0,0,0,0,0,1,1],
    [0,0,0,1,1,1,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,1,1]], [13,4,1,3]

    return [[1,1,1],[1,1,1],[1,1,1]], [1,2]
    return [[1,1,0],[1,1,0],[0,0,1]], [0,1]
    return [[1,0,0,0],[0,1,0,0],[0,0,1,1],[0,0,1,1]], [3,1]


if __name__ == "__main__":
    s = Solution()
    print(s.minMalwareSpread(*build()))
    print(s.rewrite3(*build()))
