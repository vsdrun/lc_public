#!/usr/bin/env python
# -*- coding: utf-8 -*-


"""
https://leetcode.com/problems/copy-list-with-random-pointer/description/

A linked list is given such that each node contains an additional
random pointer which could point to any node in the list or null.

Return a deep copy of the list.
"""


# Definition for singly-linked list with a random pointer.
class RandomListNode(object):
    def __init__(self, x):
        self.label = x
        self.next = None
        self.random = None


class Solution(object):
    def copyRandomList(self, head):
        """
        :type head: RandomListNode
        :rtype: RandomListNode
        """
        if not head:
            return

        orig_head = head

        while head:
            cln = RandomListNode(head.label)
            cln.random = head.random
            cln.next = head.next
            cln.FUCK = cln.label
            head.next = cln
            head = cln.next

        clone_head = orig_head.next
        head = orig_head

        # assign clone nodes' random
        while head:
            head = head.next
            head.random = head.random.next if head.random else None
            head = head.next

        head = orig_head

        # detach
        while head:
            o_head = head
            o_next = head.next.next if head.next else None

            head = head.next
            head.next = head.next.next if head.next else None

            o_head.next = o_next
            head = o_next

        return clone_head

    def rewrite(self, head):
        """
        :type head: RandomListNode
        :rtype: RandomListNode
        """



def build():
    head = RandomListNode(3)
    a = RandomListNode(4)
    e = RandomListNode(4)
    b = RandomListNode(5)
    c = RandomListNode(6)
    d = RandomListNode(7)

    head.next = a
    a.next = e
    e.next = b
    b.next = c
    c.next = d
    head.random = d
    a.random = b
    b.random = c
    c.random = a
    d.random = c
    return head


if __name__ == "__main__":
    s = Solution()
    result = s.copyRandomList(build())

    #  b = build()

    #  while b:
    #  print(b.label)
    #  b = b.next
    while result:
        print(result.label)
        result = result.next
