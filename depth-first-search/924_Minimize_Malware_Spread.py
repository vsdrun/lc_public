#!/usr/bin/env python
# -*- coding: utf-8 -*-


"""
https://leetcode.com/problems/minimize-malware-spread/

In a network of nodes,
each node i is directly connected to another node
j if and only if graph[i][j] = 1.

Some nodes initial are initially infected by malware.
Whenever two nodes are directly connected and at least one of those
two nodes is infected by malware, both nodes will be infected by malware.
This spread of malware will continue until no more nodes
can be infected in this manner.

Suppose M(initial) is the final number of nodes infected with malware in
the entire network, after the spread of malware stops.

We will remove one node from the initial list.
Return the node that if removed, would minimize M(initial).
If multiple nodes could be removed to minimize M(initial),
***return such a node with the smallest index. 需求看清楚!

Note that if a node was removed from the initial list of infected nodes,
it may still be infected later as a result of the malware spread.


Example 1:
Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
Output: 0

Example 2:
Input: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]
Output: 0

Example 3:
Input: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]
Output: 1

Note:
* 1 < graph.length = graph[0].length <= 300
* 0 <= graph[i][j] == graph[j][i] <= 1
* graph[i][i] = 1
* 1 <= initial.length < graph.length
* 0 <= initial[i] < graph.length

graph 的format explain:
1. graph的index為node index
2. graph[0] = [1,1,0] 代表 0->0 == 1, 0->1 == 1, 0->2 == 0
"""


class Solution(object):
    def minMalwareSpread(self, graph, initial):
        """
        :type graph: List[List[int]]
        :type initial: List[int]
        :rtype: int
        """
        import collections

        def find(x):
            if x != parents[x]:
                parents[x] = find(parents[x])
            return parents[x]

        def union(x, y):
            parents[find(x)] = find(y)

        # init
        n = len(graph)
        parents = range(n)

        # union
        for i in range(n):
            for j in range(i + 1, n):
                if graph[i][j] == 1:
                    union(i, j)

        #  print("parents: {}".format(parents))

        area = collections.Counter(find(i) for i in range(n))
        #  print("allNodes: {}".format(area))

        malware = collections.Counter(find(i) for i in initial)
        #  print("badnodes: {}".format(malware))
        return min(initial, key=lambda i: [
            (malware[find(i)] == 1) * -area[find(i)], i])

    def rewrite(self, graph, initial):
        """
        :type graph: List[List[int]]
        :type initial: List[int]
        :rtype: int
        """
        from collections import Counter as cc

        nodes = len(graph)
        parents = range(nodes) # [0, 1, 2, 3, ... ] SMART!

        def find(node):
            if parents[node] != node:
                return find(parents[node])
            return node

        def union(x, y):
            fx = find(x)
            fy = find(y)
            parents[fx] = fy

        # build union parents
        for x in range(nodes):
            for y in range(x + 1, nodes):
                # 注意此! 為1才是有conncetion!
                if graph[x][y] == 1:
                    union(x, y)

        #  print("parents: {}".format(parents))

        # dissect nodes forms a quorum
        # allNodes means: for each node if they form a quorum, will eventually
        # has the same return node, thus the node count would be the nodes
        # inside a quorum.
        allNodes = cc(find(i) for i in range(nodes))
        #  print("allNodes: {}".format(allNodes))

        # initial means the nodes being effected.
        # with this effected nodes, see are they in the same quorum.
        # If they are, then will have single node with multiple counts.
        # If not, if having 2 effected nodes, will have 2 counter key, each
        # has value 1.
        #  badNodes = cc(find(i) for i in initial)
        #  print("badNodes: {}".format(badNodes))

        result = []
        # 重點! 以unin的!root! 為 key! 以此key來算count!

        for bad in initial:
            key = find(bad)
            result.append((allNodes[key], -bad))

        #  print(result)

        return -max(result)[1]


def build():
    return [[1,0,0,0],[0,1,0,0],[0,0,1,1],[0,0,1,1]], [3,1]
    return [[1,1,0],[1,1,0],[0,0,1]], [0,1]
    return [[1,1,1],[1,1,1],[1,1,1]], [1,2]


if __name__ == "__main__":
    s = Solution()
    print(s.minMalwareSpread(*build()))
    print(s.rewrite(*build()))
